"use strict";function _interopDefault(ex){return ex&&"object"==typeof ex&&"default"in ex?ex.default:ex}var meow=_interopDefault(require("meow")),updateNotifier=_interopDefault(require("update-notifier")),cosmiconfig=require("cosmiconfig"),isGit=_interopDefault(require("is-git-repository")),redent=_interopDefault(require("redent")),gradient=_interopDefault(require("gradient-string")),chalk=_interopDefault(require("chalk")),nodegit=require("nodegit"),eachOfSeries=_interopDefault(require("async/eachOfSeries")),name="setgit-cli",version="1.0.3",isEmpty=obj=>[Object,Array].includes((obj||{}).constructor)&&!Object.entries(obj||{}).length,get=(obj,path,defaultValue=null)=>String.prototype.split.call(path,/[,[\].]+?/).filter(Boolean).reduce((a,c)=>Object.hasOwnProperty.call(a,c)?a[c]:defaultValue,obj),getWorkingDirectory=twd=>({twd:isEmpty(twd)?process.cwd():twd,cwd:process.cwd()});const deepmerge=require("deepmerge");async function setGit(options={twd:".",rules:{}}){const{twd:twd,rules:rules}=deepmerge({twd:".",rules:{"core.ignorecase":"false","alias.s":"status","alias.p":"push","alias.b":"branch -a -v","alias.pl":"pull --ff-only","alias.med":"merge develop","alias.mem":"merge master","alias.tags":"tag -l","alias.co":"checkout","alias.stashes":"stash list","alias.l":"log -16 --color=always --all --topo-order --pretty='%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative","alias.ll":"log --color=always --all --topo-order --pretty='%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit","alias.lg":"log -10 --color=always --all --graph --topo-order --pretty='%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative","alias.lgl":"log --color=always --all --graph --topo-order --pretty='%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit","alias.le":"!git log --oneline --color | emojify | less -r","alias.out":"log @{u}..","alias.wdiff":"diff --color-words","alias.amend":"!git log -n 1 --pretty=tformat:%s%n%n%b | git commit -F - --amend","alias.fixup":"commit --fixup=HEAD","alias.ls":"ls-files","alias.remotes":"remote -v"}},options),repo=await getRepo(twd);await setRules(repo,rules)}async function getRepo(twd){const repo=await nodegit.Repository.open(twd);return await repo.config()}async function setRules(gitCfg,rules){await eachOfSeries(rules,async(val,key)=>{await gitCfg.setString(key,val)})}class Cli{constructor(){updateNotifier({pkg:{name:name,version:version}}).notify(),this.cli=meow("\n      使用方式\n        $ setgit [工作目录，默认：'process.cwd()']\n\n      选项\n        --version, -v                              查看版本号\n        --help, -h                                 查看帮助\n\n      示例\n        $ setgit                                   为当前工作目录配置 Git\n        $ setgit /usr/pro/api.name.io              为指定工作目录配置 Git\n\n      提示\n        检测到用户未提供自定义配置时，`setgit` 将会使用默认配置，详情参见\n        https://github.com/iTonyYo/setgit-cli#配置。\n    ",{flags:{version:{type:"boolean",alias:"v"},help:{type:"boolean",alias:"h"}}}),this.workingPath=getWorkingDirectory(this.cli.input[0]).twd,this.userDefinedConfig=this.getUserDefinedConfig()}async run(){isGit(this.workingPath)?(await setGit({twd:this.workingPath,rules:this.userDefinedConfig}),this.success()):this.error()}success(){isEmpty(this.userDefinedConfig)?console.log(redent(chalk`
        {bold ${gradient.rainbow("操作成功!")}}
        {grey 检测到您未提供自定义配置，\`setgit\` 使用了默认配置。}

        {grey 操作目录：}
        {grey ${this.workingPath}}
      `)):console.log(redent(chalk`
      {greenBright.bold ${gradient.rainbow("操作成功!")}}

      {grey 操作目录：}
      {grey ${this.workingPath}}
    `))}error(){console.error(redent(chalk`
      {redBright.bold 这不是一个 Git 仓库!}

      {grey 操作目录：}
      {grey ${this.workingPath}}
    `))}getUserDefinedConfig(){const foundConfig=cosmiconfig.cosmiconfigSync("git").search(this.workingPath);return isEmpty(foundConfig)?{}:get(foundConfig,"config")}}module.exports=Cli;