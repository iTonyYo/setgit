#!/usr/bin/env node
"use strict";var e=require("meow"),t=require("update-notifier"),a=require("is-git-repository"),r=require("redent"),i=require("gradient-string"),s=require("chalk"),o=require("cosmiconfig"),l=require("nodegit"),n=require("async/eachOfLimit"),c=require("async/asyncify");function g(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var d=g(e),u=g(t),f=g(a),h=g(r),y=g(i),p=g(s),w=g(n),m=g(c),b=e=>[Object,Array].includes((e||{}).constructor)&&!Object.entries(e||{}).length;function C({name:e,workingPath:t}){const a=o.cosmiconfigSync(e).search(t);return b(a)?{}:((e,t,a=null)=>String.prototype.split.call(t,/[,[\].]+?/).filter(Boolean).reduce(((e,t)=>Object.hasOwnProperty.call(e,t)?e[t]:a),e))(a,"config")}async function v(e={twd:".",configs:{}}){const{twd:t,configs:a}=Object.assign({twd:".",configs:{"alias.ls":"ls-files","alias.remotes":"remote -v","alias.amend":"!git log -n 1 --pretty=tformat:%s%n%n%b | git commit -F - --amend","alias.fixup":"commit --fixup=HEAD","core.ignorecase":"false","alias.s":"status","alias.p":"push","alias.b":"branch -a -v","alias.cm":"commit -m","alias.tags":"tag -l","alias.co":"checkout","alias.all":"add -A","alias.pl":"pull --ff-only","alias.stashes":"stash list","alias.med":"merge develop","alias.mem":"merge master","alias.l":"log --oneline --color -6","alias.out":"log @{u}..","alias.la":"log -16 --color=always --all --topo-order --pretty='%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative","alias.ll":"log --color=always --all --topo-order --pretty='%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit","alias.lg":"log -10 --color=always --all --graph --topo-order --pretty='%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative","alias.lgl":"log --color=always --all --graph --topo-order --pretty='%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit","alias.wdiff":"diff --color-words"}},e),r=await l.Repository.open(t);await async function({repo:e,configs:t}){const a=await e.config();await w.default(t,4,m.default((async(e,t)=>{await a.setString(t,e)})))}({repo:r,configs:a})}class k{constructor(){u.default({pkg:{name:"setgit-cli",version:"1.1.3"}}).notify(),this.cli=d.default("\n      使用方式\n        $ setgit [工作目录，默认：'process.cwd()']\n\n      选项\n        --version, -v                              查看版本号\n        --help, -h                                 查看帮助\n\n      示例\n        $ setgit                                   为当前工作目录配置 Git\n        $ setgit /usr/pro/api.name.io              为指定工作目录配置 Git\n\n      提示\n        检测到用户未提供自定义配置时，`setgit` 将会使用默认配置，详情参见\n        https://github.com/iTonyYo/setgit-cli#配置。\n    ",{flags:{version:{type:"boolean",alias:"v"},help:{type:"boolean",alias:"h"}}});const e=(t=this.cli.input[0],{twd:b(t)?process.cwd():t,cwd:process.cwd()}).twd;var t;this.workingPath=e,this.userDefinedConfig=C({name:"git",workingPath:e})}async run(){f.default(this.workingPath)?(await v({twd:this.workingPath,configs:this.userDefinedConfig}),this.success()):this.error()}success(){b(this.userDefinedConfig)?console.log(h.default(p.default`
        {bold ${y.default.rainbow("操作成功!")}}
        {grey 检测到您未提供自定义配置，\`setgit\` 使用了默认配置。}

        {grey 操作目录：}
        {grey ${this.workingPath}}
      `)):console.log(h.default(p.default`
      {greenBright.bold ${y.default.rainbow("操作成功!")}}

      {grey 操作目录：}
      {grey ${this.workingPath}}
    `))}error(){console.error(h.default(p.default`
      {redBright.bold 这不是一个 Git 仓库!}

      {grey 操作目录：}
      {grey ${this.workingPath}}
    `))}}(async()=>{try{const e=new k;await e.run()}catch(e){throw e}})();
